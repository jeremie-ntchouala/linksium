// generated by Fast Light User Interface Designer (fluid) version 1.0400

#ifndef LinksiumViewUI_h
#define LinksiumViewUI_h
#include <FL/fl_ask.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Native_File_Chooser.H>
#include "ftd2xx.h"
#include "config_ftdi.h"
extern FT_STATUS ftStatus;
extern FT_STATUS device_status;
extern FT_HANDLE ftHandle0;

/**
 ftdi_trame message
*/
class Msg {
public:
  unsigned char buff[13] = {'\0'};
  t_msg_type type;
  unsigned int sliceId;
  bool withChecksum;
  unsigned int systemId;
  unsigned int hw_ver;
  unsigned int hw_rev;
  unsigned int sw_ver;
  unsigned int sw_rev;
  unsigned int dbg_slice;
  unsigned int dbg_signals;
  unsigned int ac_phase_initiale;
  unsigned int ac_amplitude;
  unsigned int ac_frequence;
  int ac_phase;
private:
  const int msglen[17] = {3, 2, 4, 4, 7, 7, 10, 10, 6, 6, 9, 1, 13, 4, 4, 4, 3};
  int _len;
public:
  Msg();
  int len();
  int xBuff(bool bCmd = false);
  void version_rd();
  void debug_cfg_wr();
  void config_ac_rd();
  void config_ac_wr();
  void clear_buff();
  void print_buff(const char *title = "Buffer_data");
  void print_buff_container();
};
extern Msg myMsg;
#include <FL/Fl.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Box.H>
/**
 Slice_Input_Data_group
*/

class Slice_Output_Data : public Fl_Group {
public:
  Slice_Output_Data(int X, int Y, int W, int H, const char *L = 0);
  Fl_Progress *ac_in_data;
  Fl_Progress *dc_in_data;
  Fl_Progress *dc_out_data;
  Fl_Box *run_state;
  Fl_Box *lock_rmp_state;
  Fl_Box *ovfl_state;
  Fl_Box *calib_state;
};

//
// SliderInputGroup, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//
#include <FL/Fl_Button.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Float_Input.H>
/**
 Fl_Slider_Input_Button
*/

class Slider_Input_Button : public Fl_Group {
public:
  Slider_Input_Button(int X, int Y, int W, int H, const char *L = 0);
  Fl_Button *decrease_data;
private:
  inline void cb_decrease_data_i(Fl_Button*, void*);
  static void cb_decrease_data(Fl_Button*, void*);
public:
  Fl_Slider *slider_data;
private:
  inline void cb_slider_data_i(Fl_Slider*, void*);
  static void cb_slider_data(Fl_Slider*, void*);
public:
  Fl_Button *increase_data;
private:
  inline void cb_increase_data_i(Fl_Button*, void*);
  static void cb_increase_data(Fl_Button*, void*);
public:
  Fl_Float_Input *input_data;
private:
  inline void cb_input_data_i(Fl_Float_Input*, void*);
  static void cb_input_data(Fl_Float_Input*, void*);
};

//
// Fl_Slicer_page, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//
#include <FL/Fl_Value_Input.H>

class Slicer_Page : public Fl_Group {
public:
  Slicer_Page(int X, int Y, int W, int H, const char *L = 0);
  Fl_Button *ramp_pid;
private:
  inline void cb_ramp_pid_i(Fl_Button*, void*);
  static void cb_ramp_pid(Fl_Button*, void*);
public:
  Fl_Button *ac_phase_init;
  Fl_Group *input_pid_group;
  Fl_Value_Input *pid1_p;
  Fl_Value_Input *pid1_i;
  Fl_Value_Input *pid1_d;
  Fl_Value_Input *pid2_p;
  Fl_Value_Input *pid2_i;
  Fl_Value_Input *pid2_d;
  Fl_Group *input_slide_group;
  Fl_Button *decrease_freq;
private:
  inline void cb_decrease_freq_i(Fl_Button*, void*);
  static void cb_decrease_freq(Fl_Button*, void*);
public:
  Fl_Slider *slider_freq;
private:
  inline void cb_slider_freq_i(Fl_Slider*, void*);
  static void cb_slider_freq(Fl_Slider*, void*);
public:
  Fl_Button *increase_freq;
private:
  inline void cb_increase_freq_i(Fl_Button*, void*);
  static void cb_increase_freq(Fl_Button*, void*);
public:
  Fl_Button *decrease_amp;
private:
  inline void cb_decrease_amp_i(Fl_Button*, void*);
  static void cb_decrease_amp(Fl_Button*, void*);
public:
  Fl_Slider *slider_amp;
private:
  inline void cb_slider_amp_i(Fl_Slider*, void*);
  static void cb_slider_amp(Fl_Slider*, void*);
public:
  Fl_Button *increase_amp;
private:
  inline void cb_increase_amp_i(Fl_Button*, void*);
  static void cb_increase_amp(Fl_Button*, void*);
public:
  Fl_Button *decrease_phase;
private:
  inline void cb_decrease_phase_i(Fl_Button*, void*);
  static void cb_decrease_phase(Fl_Button*, void*);
public:
  Fl_Slider *slider_phase;
private:
  inline void cb_slider_phase_i(Fl_Slider*, void*);
  static void cb_slider_phase(Fl_Slider*, void*);
public:
  Fl_Button *increase_phase;
private:
  inline void cb_increase_phase_i(Fl_Button*, void*);
  static void cb_increase_phase(Fl_Button*, void*);
public:
  Slice_Output_Data *Slice1;
  Slice_Output_Data *Slice2;
  Slice_Output_Data *Slice3;
  Slice_Output_Data *Slice4;
  Fl_Float_Input *input_freq;
  Fl_Float_Input *input_amp;
  Fl_Float_Input *input_phase;
};

//
// NameOfProgram, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Input.H>

class LinksiumViewUI {
public:
  LinksiumViewUI();
private:
  Fl_Double_Window *mainWindow;
public:
  Fl_Group *TitleApp;
private:
  inline void cb_Categorie_i(Fl_Tabs*, void*);
  static void cb_Categorie(Fl_Tabs*, void*);
public:
  Fl_Group *ConfigPage;
  Fl_Choice *config_choice;
  static Fl_Menu_Item menu_config_choice[];
  Fl_Choice *scheme_choice;
private:
  inline void cb_scheme_choice_i(Fl_Choice*, void*);
  static void cb_scheme_choice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_scheme_choice[];
public:
  Fl_Choice *color_theme;
  static Fl_Menu_Item menu_color_theme[];
  Fl_Input *config_file;
private:
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  Fl_Input *log_file;
private:
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Button *save_config;
  Fl_Button *reload_config;
  Fl_Button *reset_config;
  Fl_Button *exit_app;
private:
  inline void cb_exit_app_i(Fl_Button*, void*);
  static void cb_exit_app(Fl_Button*, void*);
public:
  Slicer_Page *SlicerPage1;
private:
  inline void cb_SlicerPage1_i(Slicer_Page*, void*);
  static void cb_SlicerPage1(Slicer_Page*, void*);
public:
  Slicer_Page *SlicerPage2;
private:
  inline void cb_SlicerPage2_i(Slicer_Page*, void*);
  static void cb_SlicerPage2(Slicer_Page*, void*);
public:
  Slicer_Page *SlicerPage3;
private:
  inline void cb_SlicerPage3_i(Slicer_Page*, void*);
  static void cb_SlicerPage3(Slicer_Page*, void*);
public:
  Slicer_Page *SlicerPage4;
private:
  inline void cb_SlicerPage4_i(Slicer_Page*, void*);
  static void cb_SlicerPage4(Slicer_Page*, void*);
public:
  Fl_Box *version_revision;
  Fl_Box *device_state;
  void show(int argc, char **argv);
};
void USBEventThread();
#endif

//
// NameOfProgram, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//
