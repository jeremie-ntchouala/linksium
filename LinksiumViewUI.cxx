// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "LinksiumViewUI.h"
#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include <string>
#include <thread>
#include <unistd.h>
#include "WinTypes.h"
const char* freq_name_unit[12]    = { "2.6 KHz", "3.9 KHz", "5.2 KHz", "7.8 KHz", "10.4 KHz", "15.6 KHz", "20.8 KHz", "31.3 KHz", "41.7 KHz", "62.5 KHz", "83.3 KHz", "125.0 KHz"} ;
DWORD 	dwBytesWritten, dwBytesRead;
static char version_revision[32] = "";
using namespace std;
FT_STATUS ftStatus;
FT_STATUS device_status;
FT_HANDLE ftHandle0;

Msg::Msg() {
  printf("Hello, World!\n");
}

int Msg::len() {
  return msglen[(int)type];
}

int Msg::xBuff(bool bCmd ) {
  if ((type & 0x01) || (bCmd))
  { // write message
      buff[0] = ((systemId & 0x01) << 7) | ((sliceId & 0x03) << 5) | ((withChecksum & 0x10) << 4) | (type & 0x0F);
  }

  else
  { // read message
      type         = (t_msg_type)(buff[0] & 0x0F);
      withChecksum = (buff[0] & 0x10) ? true : false;
      sliceId      = (buff[0] & 0x60) >> 5;
      systemId     = (buff[0] & 0x80) >> 7;
  }

  switch (type)
  {
  case MSG_TYPE_VERSION_RD: 
      hw_ver = (buff[1] & 0xF0) >> 4;
      hw_rev = (buff[1] & 0x0F);
      sw_ver = (buff[2] & 0xF0) >> 4;
      sw_rev = (buff[2] & 0x0F);
      break;

  case MSG_TYPE_DEBUG_CFG_WR: 
      buff[1] = (dbg_slice & 0x0003) << 6 | (dbg_signals & 0x03F);
      break;

  case MSG_TYPE_CONFIG_AC_RD: 
      ac_phase_initiale = (buff[1] & 0x80) >> 7;
      ac_amplitude      = (buff[1] & 0x7F);
      ac_frequence      = ((buff[2] & 0xF0) >> 4);
      ac_phase          = (buff[2] & 0x07) * 256 | ((buff[3] & 0xFF)) - ((buff[2] & 0x04) ? 2048 : 0);
      break;

  case MSG_TYPE_CONFIG_AC_WR: 
      buff[1] = (ac_phase_initiale & 0x0001) << 7 | (ac_amplitude & 0x007F);
      buff[2] = (ac_frequence & 0x000F) << 4 | ((ac_phase & 0x0700) >> 8);
      buff[3] = (ac_phase & 0x00FF);
      break;

  case MSG_TYPE_CONFIG_PID_ONE_RD: 
  case MSG_TYPE_CONFIG_PID_ONE_WR: 
  case MSG_TYPE_CONFIG_LOCKIN_RD : 
  case MSG_TYPE_CONFIG_LOCKIN_WR : 
  case MSG_TYPE_CONFIG_PID_TWO_RD: 
  case MSG_TYPE_CONFIG_PID_TWO_WR: 
  case MSG_TYPE_DAC_OUT_RD       : 
  case MSG_TYPE_LED_STATUS       : 
  case MSG_TYPE_RUN_TEST         : 
  case MSG_TYPE_7_WR             : 
  case MSG_TYPE_8_RD             : 
  case MSG_TYPE_8_WR             : 
      return -2;
      break;

  default: 
      return -1;
      break;
  }
  return 0;
}

void Msg::clear_buff() {
  std::fill_n(buff, sizeof(buff), 0);
}

void Msg::print_buff(const char *title ) {
  printf("%s[%ld] = ", title, sizeof(buff));
  for (int i = 0; i < sizeof(buff); i++)
  {
  	printf(" \\x%02X", buff[i]);
  }
  printf("\n");
}
Msg myMsg;

Slice_Output_Data::Slice_Output_Data(int X, int Y, int W, int H, const char *L) :
  Fl_Group(0, 0, W, H, L)
{
  this->labelsize(10);
  this->align(Fl_Align(FL_ALIGN_CENTER));
  { ac_in_data = new Fl_Progress(49, 0, 70, 17);
    ac_in_data->labelsize(10);
    ac_in_data->when(FL_WHEN_CHANGED);
    ac_in_data->value(13);
  } // Fl_Progress* ac_in_data
  { dc_in_data = new Fl_Progress(122, 0, 70, 17);
    dc_in_data->labelsize(10);
    dc_in_data->when(FL_WHEN_CHANGED);
    dc_in_data->minimum(-10); dc_in_data->maximum(10);
    dc_in_data->value(0);
  } // Fl_Progress* dc_in_data
  { dc_out_data = new Fl_Progress(195, 0, 70, 17);
    dc_out_data->labelsize(10);
    dc_out_data->when(FL_WHEN_CHANGED);
    dc_out_data->minimum(-10); dc_out_data->maximum(10);
    dc_out_data->value(0);
  } // Fl_Progress* dc_out_data
  { run_state = new Fl_Box(277, 0, 17, 17, " ");
    run_state->box(FL_ROUND_UP_BOX);
    run_state->labeltype(FL_NO_LABEL);
    run_state->labelsize(10);
    run_state->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
  } // Fl_Box* run_state
  { lock_rmp_state = new Fl_Box(308, 0, 17, 17);
    lock_rmp_state->box(FL_ROUND_UP_BOX);
    lock_rmp_state->labeltype(FL_NO_LABEL);
    lock_rmp_state->labelsize(10);
    lock_rmp_state->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
  } // Fl_Box* lock_rmp_state
  { ovfl_state = new Fl_Box(340, 0, 17, 17);
    ovfl_state->box(FL_ROUND_UP_BOX);
    ovfl_state->labeltype(FL_NO_LABEL);
    ovfl_state->labelsize(10);
    ovfl_state->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
  } // Fl_Box* ovfl_state
  { calib_state = new Fl_Box(370, 0, 17, 17, "label");
    calib_state->box(FL_ROUND_UP_BOX);
    calib_state->labeltype(FL_NO_LABEL);
    calib_state->labelsize(10);
    calib_state->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
  } // Fl_Box* calib_state
  position(X, Y);
  end();
}

//
// SliderInputGroup, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//

void Slider_Input_Button::cb_decrease_data_i(Fl_Button*, void*) {
  slider_data->value( ((slider_data->value() <= slider_data->minimum() ) ?  0 : (slider_data->value() - slider_data->step()) ));
  slider_data->do_callback();
}
void Slider_Input_Button::cb_decrease_data(Fl_Button* o, void* v) {
  ((Slider_Input_Button*)(o->parent()))->cb_decrease_data_i(o,v);
}

void Slider_Input_Button::cb_slider_data_i(Fl_Slider*, void*) {
  char buff[128];
  sprintf(buff,"%s [%d]", freq_name_unit[(int)slider_data->value()],(int)slider_data->value());
  input_data->value(buff);
}
void Slider_Input_Button::cb_slider_data(Fl_Slider* o, void* v) {
  ((Slider_Input_Button*)(o->parent()))->cb_slider_data_i(o,v);
}

void Slider_Input_Button::cb_increase_data_i(Fl_Button*, void*) {
  slider_data->value( ((slider_data->value() >= slider_data->maximum() ) ?  0 : (slider_data->value() + slider_data->step()) ));
  slider_data->do_callback();
}
void Slider_Input_Button::cb_increase_data(Fl_Button* o, void* v) {
  ((Slider_Input_Button*)(o->parent()))->cb_increase_data_i(o,v);
}

void Slider_Input_Button::cb_input_data_i(Fl_Float_Input*, void*) {
  char buff[128];
  sprintf(buff,"%s [%d]", freq_name_unit[(int)slider_data->value()],(int)slider_data->value());
  input_data->value(buff);
}
void Slider_Input_Button::cb_input_data(Fl_Float_Input* o, void* v) {
  ((Slider_Input_Button*)(o->parent()))->cb_input_data_i(o,v);
}

Slider_Input_Button::Slider_Input_Button(int X, int Y, int W, int H, const char *L) :
  Fl_Group(0, 0, 420, 30, L)
{
  this->labelsize(10);
  { decrease_data = new Fl_Button(7, 10, 15, 15, "@<");
    decrease_data->labelsize(10);
    decrease_data->callback((Fl_Callback*)cb_decrease_data);
    decrease_data->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
  } // Fl_Button* decrease_data
  { slider_data = new Fl_Slider(23, 10, 290, 15, "slider:");
    slider_data->type(1);
    slider_data->box(FL_THIN_DOWN_BOX);
    slider_data->labeltype(FL_NO_LABEL);
    slider_data->labelsize(10);
    slider_data->maximum(100);
    slider_data->step(1);
    slider_data->value(50);
    slider_data->callback((Fl_Callback*)cb_slider_data);
    slider_data->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    slider_data->bounds(0, 11); slider_data->value(0);
  } // Fl_Slider* slider_data
  { increase_data = new Fl_Button(314, 10, 15, 15, "@>");
    increase_data->labelsize(10);
    increase_data->callback((Fl_Callback*)cb_increase_data);
    increase_data->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
  } // Fl_Button* increase_data
  { input_data = new Fl_Float_Input(340, 10, 80, 17, "Frequence (KHz)");
    input_data->type(1);
    input_data->labelsize(10);
    input_data->textsize(11);
    input_data->callback((Fl_Callback*)cb_input_data);
    input_data->align(Fl_Align(FL_ALIGN_TOP));
    input_data->when(FL_WHEN_ENTER_KEY_ALWAYS);
  } // Fl_Float_Input* input_data
  resize(X, Y, W, H);
  end();
  resizable(this);
}

//
// Fl_Slicer_page, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//

void Slicer_Page::cb_ramp_pid_i(Fl_Button*, void*) {
  ramp_pid->deactivate();
  if( "RMP\nPID" == ramp_pid->label()){
      ramp_pid->label("SIG\nNAL");
      input_slide_group->hide();
      input_pid_group->show();

  }else {
      ramp_pid->label("RMP\nPID");
      input_slide_group->show();
      input_pid_group->hide();
       
  }
  ramp_pid->activate();
}
void Slicer_Page::cb_ramp_pid(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()))->cb_ramp_pid_i(o,v);
}

void Slicer_Page::cb_decrease_freq_i(Fl_Button*, void*) {
  slider_freq->value( ((slider_freq->value() <= slider_freq->minimum() ) ?  0 : (slider_freq->value() - slider_freq->step()) ));
  slider_freq->do_callback();
}
void Slicer_Page::cb_decrease_freq(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_decrease_freq_i(o,v);
}

void Slicer_Page::cb_slider_freq_i(Fl_Slider*, void*) {
  char buff[32];
  sprintf(buff,"%s [%d]", freq_name_unit[(int)slider_freq->value()],(int)slider_freq->value());
  input_freq->value(buff);

  myMsg.systemId     = 0;
  //myMsg.sliceId      = 0;
  myMsg.withChecksum = false;
  myMsg.type         = MSG_TYPE_CONFIG_AC_WR;

  myMsg.ac_frequence = (int)slider_freq->value();
  myMsg.xBuff();
  ftStatus = FT_Write(ftHandle0, myMsg.buff, myMsg.len(), &dwBytesWritten);
}
void Slicer_Page::cb_slider_freq(Fl_Slider* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_slider_freq_i(o,v);
}

void Slicer_Page::cb_increase_freq_i(Fl_Button*, void*) {
  slider_freq->value( ((slider_freq->value() >= slider_freq->maximum() ) ?  slider_freq->maximum() : (slider_freq->value() + slider_freq->step()) ));
  slider_freq->do_callback();
}
void Slicer_Page::cb_increase_freq(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_increase_freq_i(o,v);
}

void Slicer_Page::cb_decrease_amp_i(Fl_Button*, void*) {
  slider_amp->value( ((slider_amp->value() <= slider_amp->minimum() ) ?  0 : (slider_amp->value() - slider_amp->step()) ));
  slider_amp->do_callback();
}
void Slicer_Page::cb_decrease_amp(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_decrease_amp_i(o,v);
}

void Slicer_Page::cb_slider_amp_i(Fl_Slider*, void*) {
  char buff[32];
  sprintf(buff,"%.1f mVpk [%d]", (100 * (slider_amp->value() / slider_amp->maximum())),(int)slider_amp->value());
  input_amp->value(buff);

  myMsg.systemId     = 0;
  //myMsg.sliceId      = 0;
  myMsg.withChecksum = false;
  myMsg.type         = MSG_TYPE_CONFIG_AC_WR;

  myMsg.ac_amplitude = (int)slider_amp->value();
  myMsg.xBuff();
  ftStatus = FT_Write(ftHandle0, myMsg.buff, myMsg.len(), &dwBytesWritten);
}
void Slicer_Page::cb_slider_amp(Fl_Slider* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_slider_amp_i(o,v);
}

void Slicer_Page::cb_increase_amp_i(Fl_Button*, void*) {
  slider_amp->value( ((slider_amp->value() >= slider_amp->maximum() ) ?  slider_amp->maximum() : (slider_amp->value() + slider_amp->step()) ));
  slider_amp->do_callback();
}
void Slicer_Page::cb_increase_amp(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_increase_amp_i(o,v);
}

void Slicer_Page::cb_decrease_phase_i(Fl_Button*, void*) {
  slider_phase->value( ((slider_phase->value() <= slider_phase->minimum() ) ?  0 : (slider_phase->value() - slider_phase->step()) ));
  slider_phase->do_callback();
}
void Slicer_Page::cb_decrease_phase(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_decrease_phase_i(o,v);
}

void Slicer_Page::cb_slider_phase_i(Fl_Slider*, void*) {
  char buff[32];
  sprintf(buff,"%.1f deg [%d]", (-180.0 + (360.0 / slider_phase->maximum()) * slider_phase->value()),(int)slider_phase->value());
  input_phase->value(buff);

  myMsg.systemId     = 0;
  // myMsg.sliceId      = 0;
  myMsg.withChecksum = false;
  myMsg.type         = MSG_TYPE_CONFIG_AC_WR;

  myMsg.ac_phase_initiale = (int)ac_phase_init->value();
  myMsg.ac_phase = (int)slider_phase->value();
  myMsg.xBuff();
  ftStatus = FT_Write(ftHandle0, myMsg.buff, myMsg.len(), &dwBytesWritten);
}
void Slicer_Page::cb_slider_phase(Fl_Slider* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_slider_phase_i(o,v);
}

void Slicer_Page::cb_increase_phase_i(Fl_Button*, void*) {
  slider_phase->value( ((slider_phase->value() >= slider_phase->maximum() ) ?  slider_phase->maximum() : (slider_phase->value() + slider_phase->step()) ));
  slider_phase->do_callback();
}
void Slicer_Page::cb_increase_phase(Fl_Button* o, void* v) {
  ((Slicer_Page*)(o->parent()->parent()->parent()->parent()))->cb_increase_phase_i(o,v);
}

Slicer_Page::Slicer_Page(int X, int Y, int W, int H, const char *L) :
  Fl_Group(0, 0, W, H, L)
{
  this->labelsize(10);
  this->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
  { Fl_Group* o = new Fl_Group(5, 5, 460, 100, "input_ramp");
    o->labeltype(FL_NO_LABEL);
    o->labelsize(10);
    o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    { ramp_pid = new Fl_Button(5, 5, 35, 35, "RMP\nPID");
      ramp_pid->down_box(FL_DOWN_BOX);
      ramp_pid->selection_color(FL_DARK2);
      ramp_pid->labelsize(9);
      ramp_pid->callback((Fl_Callback*)cb_ramp_pid);
    } // Fl_Button* ramp_pid
    { ac_phase_init = new Fl_Button(5, 64, 35, 35, "INIT\nPHASE");
      ac_phase_init->type(1);
      ac_phase_init->down_box(FL_DOWN_BOX);
      ac_phase_init->selection_color(FL_DARK2);
      ac_phase_init->labelsize(9);
    } // Fl_Button* ac_phase_init
    o->end();
  } // Fl_Group* o
  { input_pid_group = new Fl_Group(45, 2, 325, 100, "input_pid_group");
    input_pid_group->color((Fl_Color)55);
    input_pid_group->labeltype(FL_NO_LABEL);
    input_pid_group->labelsize(10);
    input_pid_group->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    input_pid_group->hide();
    { Fl_Group* o = new Fl_Group(45, 5, 325, 30, "RAMP:");
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { Fl_Value_Input* o = new Fl_Value_Input(88, 17, 79, 17, "Min:");
        o->labelsize(10);
        o->minimum(-10);
        o->maximum(10);
        o->textsize(10);
        o->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* o
      { Fl_Value_Input* o = new Fl_Value_Input(187, 17, 79, 17, "Max:");
        o->labelsize(10);
        o->minimum(-10);
        o->maximum(10);
        o->textsize(10);
        o->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* o
      { Fl_Value_Input* o = new Fl_Value_Input(287, 17, 79, 17, "Speed:");
        o->labelsize(10);
        o->minimum(-10);
        o->maximum(10);
        o->textsize(10);
        o->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(45, 37, 325, 30, "PID 1:");
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { pid1_p = new Fl_Value_Input(88, 50, 79, 17, "P:");
        pid1_p->labelsize(10);
        pid1_p->minimum(-100);
        pid1_p->maximum(100);
        pid1_p->textsize(10);
        pid1_p->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* pid1_p
      { pid1_i = new Fl_Value_Input(187, 50, 79, 17, "I:");
        pid1_i->labelsize(10);
        pid1_i->minimum(-100);
        pid1_i->maximum(100);
        pid1_i->textsize(10);
        pid1_i->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* pid1_i
      { pid1_d = new Fl_Value_Input(287, 50, 79, 17, "D:");
        pid1_d->labelsize(10);
        pid1_d->minimum(-100);
        pid1_d->maximum(100);
        pid1_d->textsize(10);
        pid1_d->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* pid1_d
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(45, 69, 325, 31, "PID 2:");
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { pid2_p = new Fl_Value_Input(88, 83, 79, 17, "P:");
        pid2_p->labelsize(10);
        pid2_p->minimum(-100);
        pid2_p->maximum(100);
        pid2_p->textsize(10);
        pid2_p->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* pid2_p
      { pid2_i = new Fl_Value_Input(187, 83, 79, 17, "I:");
        pid2_i->labelsize(10);
        pid2_i->maximum(10);
        pid2_i->textsize(10);
        pid2_i->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* pid2_i
      { pid2_d = new Fl_Value_Input(287, 83, 79, 17, "D:");
        pid2_d->labelsize(10);
        pid2_d->maximum(10);
        pid2_d->textsize(10);
        pid2_d->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Input* pid2_d
      o->end();
    } // Fl_Group* o
    input_pid_group->end();
  } // Fl_Group* input_pid_group
  { input_slide_group = new Fl_Group(45, 2, 325, 100, "input_slide_group");
    input_slide_group->color((Fl_Color)55);
    input_slide_group->labeltype(FL_NO_LABEL);
    input_slide_group->labelsize(10);
    input_slide_group->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(45, 4, 325, 32, "frequence");
      o->labeltype(FL_NO_LABEL);
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { Fl_Group* o = new Fl_Group(45, 20, 324, 15);
        o->labeltype(FL_NO_LABEL);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        { decrease_freq = new Fl_Button(46, 20, 15, 15, "@<");
          decrease_freq->labelsize(10);
          decrease_freq->callback((Fl_Callback*)cb_decrease_freq);
          decrease_freq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* decrease_freq
        { slider_freq = new Fl_Slider(62, 20, 290, 15, "slider:");
          slider_freq->type(1);
          slider_freq->box(FL_THIN_DOWN_BOX);
          slider_freq->labeltype(FL_NO_LABEL);
          slider_freq->labelsize(10);
          slider_freq->maximum(11);
          slider_freq->step(1);
          slider_freq->callback((Fl_Callback*)cb_slider_freq);
          slider_freq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Slider* slider_freq
        { increase_freq = new Fl_Button(353, 20, 15, 15, "@>");
          increase_freq->labelsize(10);
          increase_freq->callback((Fl_Callback*)cb_increase_freq);
          increase_freq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* increase_freq
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(59, 7, 296, 15);
        { Fl_Box* o = new Fl_Box(59, 7, 15, 15, "2.6\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(84, 7, 15, 15, "3.9\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(109, 7, 15, 15, "5.2\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(136, 7, 15, 15, "7.8\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(161, 7, 15, 15, "10.4\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(187, 7, 15, 15, "15.6\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(212, 7, 15, 15, "20.8\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(237, 7, 15, 15, "31.2\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(263, 7, 15, 15, "41.7\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(288, 7, 15, 15, "62.5\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(313, 7, 15, 15, "83.4\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(340, 7, 15, 15, "125\n|");
          o->labelsize(7);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(45, 39, 325, 28, "amplitude");
      o->labeltype(FL_NO_LABEL);
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { Fl_Group* o = new Fl_Group(45, 52, 324, 15);
        o->labeltype(FL_NO_LABEL);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        { decrease_amp = new Fl_Button(46, 52, 15, 15, "@<");
          decrease_amp->labelsize(10);
          decrease_amp->callback((Fl_Callback*)cb_decrease_amp);
          decrease_amp->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* decrease_amp
        { slider_amp = new Fl_Slider(62, 52, 290, 15, "slider:");
          slider_amp->type(1);
          slider_amp->box(FL_THIN_DOWN_BOX);
          slider_amp->labeltype(FL_NO_LABEL);
          slider_amp->labelsize(10);
          slider_amp->maximum(128);
          slider_amp->step(1);
          slider_amp->callback((Fl_Callback*)cb_slider_amp);
          slider_amp->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Slider* slider_amp
        { increase_amp = new Fl_Button(353, 52, 15, 15, "@>");
          increase_amp->labelsize(10);
          increase_amp->callback((Fl_Callback*)cb_increase_amp);
          increase_amp->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* increase_amp
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(59, 39, 296, 15);
        { Fl_Box* o = new Fl_Box(59, 39, 15, 15, "0\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(79, 39, 15, 15, "7\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(95, 39, 15, 15, "13\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(109, 39, 15, 15, "18\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(131, 39, 15, 15, "23\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(149, 39, 15, 15, "30\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(169, 39, 15, 15, "39\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(184, 39, 15, 15, "44.5\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(200, 39, 15, 15, "50\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(222, 39, 15, 15, "58\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(243, 39, 15, 15, "65\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(261, 39, 15, 15, "72\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(281, 39, 15, 15, "79\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(301, 39, 15, 15, "86\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(319, 39, 15, 15, "93\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(340, 39, 15, 15, "100\n|");
          o->labelsize(7);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(45, 71, 325, 28, "phase");
      o->labeltype(FL_NO_LABEL);
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { Fl_Group* o = new Fl_Group(45, 84, 324, 15);
        o->labeltype(FL_NO_LABEL);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        { decrease_phase = new Fl_Button(46, 84, 15, 15, "@<");
          decrease_phase->labelsize(10);
          decrease_phase->callback((Fl_Callback*)cb_decrease_phase);
          decrease_phase->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* decrease_phase
        { slider_phase = new Fl_Slider(62, 84, 290, 15, "slider:");
          slider_phase->type(1);
          slider_phase->box(FL_THIN_DOWN_BOX);
          slider_phase->labeltype(FL_NO_LABEL);
          slider_phase->labelsize(10);
          slider_phase->maximum(1024);
          slider_phase->step(1);
          slider_phase->value(512);
          slider_phase->callback((Fl_Callback*)cb_slider_phase);
          slider_phase->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Slider* slider_phase
        { increase_phase = new Fl_Button(353, 84, 15, 15, "@>");
          increase_phase->labelsize(10);
          increase_phase->callback((Fl_Callback*)cb_increase_phase);
          increase_phase->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* increase_phase
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(59, 71, 296, 15);
        { Fl_Box* o = new Fl_Box(59, 71, 15, 15, "-180\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(76, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(94, 71, 15, 15, "-135\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(111, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(129, 71, 15, 15, "-90\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(146, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(163, 71, 15, 15, "-45\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(182, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(200, 71, 15, 15, "0\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(218, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(235, 71, 15, 15, "45\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(253, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(270, 71, 15, 15, "90\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(287, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(304, 71, 15, 15, "135\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(323, 71, 15, 15, "\n|");
          o->labelsize(7);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(340, 71, 15, 15, "180\n|");
          o->labelsize(7);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    input_slide_group->end();
  } // Fl_Group* input_slide_group
  { Fl_Group* o = new Fl_Group(5, 110, 460, 100, "ouput_slice_group");
    o->labeltype(FL_NO_LABEL);
    o->labelsize(10);
    o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(137, 111, 327, 25, "output_title_group");
      o->labeltype(FL_NO_LABEL);
      o->labelsize(10);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      { Fl_Box* o = new Fl_Box(137, 111, 30, 25, "AC In\nLevel");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(209, 111, 30, 25, "DC In\nOffset");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(281, 111, 30, 25, "DC Out\nOffset");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(341, 111, 30, 25, "\nRUN");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(372, 111, 30, 25, "LOCK/RMP\n|");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(403, 111, 30, 25, "\nOVFL");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(434, 111, 30, 25, "CALIB\n|");
        o->labelsize(10);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Slice1 = new Slice_Output_Data(70, 137, 395, 17, "Slice1");
      Slice1->box(FL_NO_BOX);
      Slice1->color(FL_BACKGROUND_COLOR);
      Slice1->selection_color(FL_BACKGROUND_COLOR);
      Slice1->labeltype(FL_NORMAL_LABEL);
      Slice1->labelfont(0);
      Slice1->labelsize(11);
      Slice1->labelcolor(FL_FOREGROUND_COLOR);
      Slice1->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Slice1->when(FL_WHEN_RELEASE);
      Slice1->end();
    } // Slice_Output_Data* Slice1
    { Slice2 = new Slice_Output_Data(70, 156, 395, 17, "Slice2");
      Slice2->box(FL_NO_BOX);
      Slice2->color(FL_BACKGROUND_COLOR);
      Slice2->selection_color(FL_BACKGROUND_COLOR);
      Slice2->labeltype(FL_NORMAL_LABEL);
      Slice2->labelfont(0);
      Slice2->labelsize(11);
      Slice2->labelcolor(FL_FOREGROUND_COLOR);
      Slice2->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Slice2->when(FL_WHEN_RELEASE);
      Slice2->end();
    } // Slice_Output_Data* Slice2
    { Slice3 = new Slice_Output_Data(70, 175, 395, 17, "Slice3");
      Slice3->box(FL_NO_BOX);
      Slice3->color(FL_BACKGROUND_COLOR);
      Slice3->selection_color(FL_BACKGROUND_COLOR);
      Slice3->labeltype(FL_NORMAL_LABEL);
      Slice3->labelfont(0);
      Slice3->labelsize(11);
      Slice3->labelcolor(FL_FOREGROUND_COLOR);
      Slice3->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Slice3->when(FL_WHEN_RELEASE);
      Slice3->end();
    } // Slice_Output_Data* Slice3
    { Slice4 = new Slice_Output_Data(70, 193, 395, 17, "Slice4");
      Slice4->box(FL_NO_BOX);
      Slice4->color(FL_BACKGROUND_COLOR);
      Slice4->selection_color(FL_BACKGROUND_COLOR);
      Slice4->labeltype(FL_NORMAL_LABEL);
      Slice4->labelfont(0);
      Slice4->labelsize(11);
      Slice4->labelcolor(FL_FOREGROUND_COLOR);
      Slice4->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Slice4->when(FL_WHEN_RELEASE);
      Slice4->end();
    } // Slice_Output_Data* Slice4
    o->end();
  } // Fl_Group* o
  { Fl_Box* o = new Fl_Box(0, 105, 470, 3, "divider_line");
    o->box(FL_ENGRAVED_BOX);
    o->labeltype(FL_NO_LABEL);
    o->labelsize(10);
  } // Fl_Box* o
  { Fl_Group* o = new Fl_Group(370, 6, 95, 96, "out_slide");
    o->labeltype(FL_NO_LABEL);
    o->labelsize(10);
    o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    { input_freq = new Fl_Float_Input(370, 17, 95, 17, "Frequence (KHz)");
      input_freq->type(1);
      input_freq->labelsize(9);
      input_freq->textsize(10);
      input_freq->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Float_Input* input_freq
    { input_amp = new Fl_Float_Input(370, 50, 95, 17, "Amplitude (mVpk)");
      input_amp->type(1);
      input_amp->labelsize(9);
      input_amp->textsize(10);
      input_amp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Float_Input* input_amp
    { input_phase = new Fl_Float_Input(370, 82, 95, 17, "Phase (deg)");
      input_phase->type(1);
      input_phase->labelsize(9);
      input_phase->textsize(10);
      input_phase->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Float_Input* input_phase
    o->end();
  } // Fl_Group* o
  slider_freq->do_callback();
  slider_amp->do_callback();
  slider_phase->do_callback();
  position(X, Y);
  end();
}

//
// NameOfProgram, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//

#include <FL/Fl_PNG_Image.H>

static const unsigned char idata_title_image[] =
{137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,200,0,0,0,24,8,6,0,0,0,
191,102,178,177,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,11,
206,73,68,65,84,120,218,237,156,121,112,85,245,21,199,63,231,222,247,242,182,36,
144,196,0,46,128,40,132,37,27,68,180,162,184,32,131,116,220,43,130,211,69,171,
52,22,149,4,220,58,181,56,83,165,90,196,118,4,36,145,161,21,75,181,139,138,51,
86,196,5,87,164,42,160,162,98,18,32,17,4,139,27,75,8,144,61,111,185,167,127,
228,130,55,47,47,33,84,120,33,157,119,102,222,228,247,126,191,115,127,251,247,
108,247,188,136,170,146,160,248,146,228,145,134,193,16,154,168,165,138,42,133,
184,30,130,204,198,224,89,134,17,34,128,80,169,149,212,37,78,37,54,25,137,45,
232,6,178,240,96,113,41,73,156,25,111,112,0,232,189,88,24,252,0,31,151,227,195,
76,28,72,199,228,74,108,65,55,80,132,16,208,136,208,210,141,179,104,193,162,17,
33,148,56,144,132,6,73,80,130,142,127,128,136,200,169,34,114,129,136,20,116,
139,237,47,146,38,34,106,127,118,39,142,63,65,199,133,137,37,34,139,128,91,162,
234,0,62,83,213,161,113,92,111,189,163,156,153,56,254,4,29,47,62,200,248,54,182,
47,120,236,114,150,136,236,87,213,222,113,113,78,85,67,54,48,91,93,229,4,125,
127,225,151,197,112,60,228,210,139,129,89,239,61,178,163,234,202,219,158,166,55,
224,3,12,182,69,76,94,54,77,30,102,190,126,145,48,177,58,166,63,1,41,170,42,170,
234,5,210,28,109,189,186,105,237,61,58,190,45,231,224,147,115,240,181,169,187,4,
143,228,145,38,249,101,129,239,215,57,34,227,240,74,255,182,253,183,97,25,194,
41,146,207,173,120,185,28,24,136,146,20,198,29,34,213,6,71,35,176,159,211,204,
189,20,241,53,219,41,150,175,186,58,252,219,179,197,203,52,57,177,83,166,159,75,
6,211,165,95,187,250,27,165,159,48,219,104,93,6,6,119,200,201,76,151,193,34,
98,72,140,251,46,96,112,187,156,202,77,50,40,102,123,119,189,7,17,17,117,72,
118,137,209,94,10,76,0,118,3,133,128,27,184,6,8,0,79,168,106,133,205,247,8,176,
7,48,85,117,182,227,249,169,192,64,32,5,152,163,170,213,81,227,238,83,213,116,
17,41,6,110,180,251,255,167,170,62,120,204,215,62,156,12,76,10,9,179,93,43,89,
214,41,239,217,140,224,0,147,241,240,145,110,224,197,67,245,185,220,67,132,176,
110,226,33,201,107,200,197,10,140,33,66,50,110,64,17,32,76,152,74,221,44,175,
131,182,211,150,146,199,79,128,1,8,37,250,41,13,109,218,242,185,133,8,39,65,211,
10,173,240,125,16,83,107,248,185,132,32,22,38,223,0,107,180,156,47,157,151,78,
193,162,80,6,227,225,102,234,185,147,20,150,82,170,83,219,116,116,139,92,200,87,
172,98,32,229,148,106,222,161,250,98,89,77,21,231,147,205,141,204,215,191,198,
220,152,66,81,118,194,182,28,122,159,54,87,15,0,48,67,70,176,149,141,12,102,43,
22,75,8,49,151,166,214,9,33,64,10,149,53,194,132,244,133,250,21,64,164,88,86,
152,141,92,70,200,22,151,110,32,192,107,148,232,196,120,155,88,71,10,158,253,14,
205,146,5,84,218,159,97,118,221,215,64,133,93,158,225,120,116,182,163,252,32,
208,199,46,47,7,86,71,13,179,71,68,102,2,11,28,117,115,68,100,180,170,78,58,110,
116,119,51,130,129,23,105,119,86,245,184,104,146,188,134,92,194,129,139,48,16,
146,176,8,19,65,49,48,16,76,178,37,187,37,85,55,242,108,151,247,190,128,147,176,
240,99,176,75,203,252,235,99,42,90,15,23,96,161,64,149,150,243,114,12,213,220,
10,200,37,186,21,184,171,177,88,158,246,11,229,49,12,124,131,38,192,32,185,77,
189,197,78,122,1,17,246,116,56,81,31,77,244,198,119,250,92,173,211,239,246,116,
47,25,128,146,10,220,79,200,22,167,6,74,16,161,142,97,233,169,172,21,24,168,
197,242,15,179,142,203,112,219,34,212,0,26,128,58,46,166,72,222,161,84,207,139,
43,64,236,203,56,8,56,17,152,226,104,58,51,138,175,58,202,236,218,8,100,59,192,
1,80,211,133,33,119,57,0,178,47,70,123,150,13,142,106,123,123,210,237,250,171,
69,100,162,170,190,122,92,72,139,102,118,208,194,51,132,163,46,139,133,98,16,
193,10,156,131,27,33,200,39,152,172,215,141,52,136,224,102,40,195,73,226,60,72,
234,47,57,92,175,21,60,217,165,241,130,92,130,96,224,231,173,152,154,39,155,241,
36,145,74,19,85,90,217,10,14,25,222,120,6,233,254,188,193,107,30,175,222,242,
139,194,23,240,82,7,124,30,22,158,119,149,242,128,95,117,125,204,177,220,108,96,
24,179,80,54,198,52,127,165,83,51,216,34,218,238,104,65,237,215,158,30,44,220,
120,185,137,69,186,68,192,208,233,210,7,47,111,82,199,8,45,146,93,52,115,2,201,
4,155,45,46,246,61,170,239,40,88,141,69,82,224,23,86,177,143,177,145,34,249,
139,153,73,97,60,195,188,115,128,153,14,112,236,0,210,212,177,121,34,50,4,200,
112,154,94,170,154,19,203,4,59,74,52,65,85,51,85,53,3,88,226,168,127,232,120,
209,166,90,73,157,110,103,131,86,241,117,76,13,100,144,132,155,231,116,51,171,
15,154,74,170,132,180,146,178,201,229,83,22,19,164,17,161,143,228,115,246,97,
133,88,78,67,62,66,26,202,46,93,199,166,14,194,58,57,68,8,223,87,197,10,27,48,
63,195,244,143,39,66,127,161,49,153,221,192,94,82,216,195,72,87,53,247,113,29,
97,138,164,52,102,95,243,180,134,82,125,144,18,125,225,168,122,150,97,122,5,45,
38,177,72,151,28,210,104,143,234,78,41,209,92,2,236,69,72,198,5,123,148,129,
222,69,186,250,160,198,243,151,234,199,107,221,244,35,0,230,1,110,164,154,129,
241,4,200,98,224,45,224,99,251,251,0,96,159,136,124,232,224,41,238,228,146,206,
63,6,81,173,55,28,229,155,28,77,249,199,141,185,121,58,89,146,199,221,146,195,
15,163,228,39,40,94,92,141,235,116,61,59,98,61,187,76,151,69,72,226,25,4,139,
48,103,117,174,225,167,152,16,24,135,65,11,27,121,166,163,192,0,6,1,194,84,223,
171,88,50,132,84,12,6,0,95,178,142,251,63,211,226,167,120,65,133,167,84,170,251,
112,50,39,240,8,62,160,134,233,86,145,124,212,78,57,22,201,249,252,88,148,25,
178,230,168,109,152,5,184,169,75,90,172,207,197,50,253,194,194,92,90,240,98,240,
65,230,163,186,51,154,103,204,60,109,194,195,75,4,1,40,136,27,64,84,245,78,85,
29,175,170,103,216,26,225,128,221,52,90,68,14,30,254,8,199,35,229,237,20,232,
209,165,72,143,8,87,249,176,176,112,33,49,195,210,73,124,226,95,223,233,190,151,
177,15,229,0,130,95,198,225,109,199,80,107,239,67,238,178,137,8,45,132,169,97,
12,177,163,96,107,49,9,162,96,95,159,17,182,9,164,24,204,166,151,92,79,128,217,
114,197,206,169,146,121,66,137,126,67,137,222,246,118,16,159,149,65,179,177,143,
2,102,200,245,206,238,188,38,13,4,1,235,40,70,83,35,64,132,218,142,154,93,202,
87,52,2,102,148,70,110,75,223,218,127,83,187,51,213,228,143,142,242,101,49,64,
144,220,206,53,60,114,89,210,25,133,162,124,31,255,113,9,16,47,138,18,33,18,181,
30,3,193,64,186,148,236,104,81,135,1,124,139,59,218,143,209,237,52,75,14,201,
88,12,67,49,49,201,164,150,66,201,230,46,25,193,85,34,248,191,19,114,212,163,
68,48,233,13,160,203,169,195,226,91,12,6,240,42,197,167,253,109,193,85,124,192,
242,126,77,236,102,154,104,83,161,156,117,225,82,109,14,9,87,98,2,22,115,162,68,
122,216,246,130,143,110,62,152,217,9,224,4,195,22,9,102,87,66,40,113,1,136,136,
12,138,81,125,141,163,124,48,34,245,134,163,238,238,40,254,153,71,56,108,254,
97,175,94,91,122,216,81,126,41,46,151,223,245,61,247,95,186,248,188,187,3,253,
35,132,237,210,21,118,95,239,34,60,79,11,239,227,98,63,6,67,25,78,177,20,48,
198,161,179,190,5,82,36,139,145,0,186,145,165,120,89,129,193,167,181,12,216,76,
14,171,200,224,77,44,240,193,251,0,158,133,250,26,201,64,61,39,75,215,238,156,
32,118,32,162,99,95,67,227,115,68,199,30,28,6,176,77,68,54,2,175,217,74,240,90,
160,191,195,252,90,108,255,157,47,34,243,236,234,83,69,164,220,14,209,22,117,5,
204,34,178,3,88,10,76,239,226,220,20,152,11,228,1,151,56,154,138,226,2,16,171,
155,95,86,42,45,50,146,179,48,233,67,132,106,173,96,131,221,178,29,88,45,57,12,
198,205,101,132,56,87,134,29,216,169,149,189,182,211,192,74,220,220,64,18,227,
100,20,232,39,108,208,15,169,104,21,114,87,3,122,145,128,161,51,164,142,3,223,
105,31,76,34,88,152,218,181,12,134,102,92,64,248,80,100,49,22,132,220,109,66,
202,199,136,140,184,28,67,43,101,3,183,3,119,57,193,1,140,141,226,255,181,163,
156,3,220,99,135,125,63,236,160,255,27,28,229,254,192,111,109,115,204,105,99,
102,218,128,136,181,225,119,71,129,99,174,234,49,78,139,232,103,27,76,174,110,
126,15,101,16,36,66,46,138,129,240,74,187,131,171,96,43,141,188,214,170,93,122,
93,46,227,72,214,45,236,193,197,74,32,137,48,19,36,155,105,50,156,137,50,158,2,
25,214,120,18,119,203,239,181,88,202,56,128,159,84,71,240,160,9,179,203,171,53,
120,219,6,213,244,88,26,167,118,166,12,161,30,15,189,227,177,69,199,222,57,87,
219,249,254,21,240,172,109,190,44,4,46,176,195,184,239,69,241,255,129,214,84,
148,121,192,203,192,44,219,169,95,217,65,255,79,0,167,3,127,6,94,4,174,83,213,
20,251,210,95,11,252,18,88,107,243,214,216,218,101,18,112,182,221,239,61,246,
56,243,128,76,85,253,205,49,223,147,85,236,71,104,70,200,20,137,242,11,226,73,
22,22,144,68,144,77,90,206,174,152,115,221,194,38,148,119,49,73,98,15,133,146,
75,95,45,163,156,17,107,23,98,241,5,74,42,38,163,104,225,170,65,85,75,198,83,
198,44,170,201,38,149,189,148,232,64,128,240,116,185,135,32,224,99,93,151,230,
85,162,75,73,199,162,150,49,90,36,143,57,155,234,111,145,156,84,139,42,90,0,
139,194,30,111,98,217,23,115,51,176,249,8,248,247,3,119,70,85,247,239,132,127,
27,48,45,170,174,12,40,139,193,187,40,234,251,156,110,185,156,17,62,65,24,67,
14,183,74,46,117,96,191,246,50,16,4,31,159,178,72,245,40,71,218,106,162,76,58,
193,133,98,46,171,154,242,58,157,100,188,104,57,107,100,36,30,34,140,70,248,169,
228,240,142,86,140,249,208,22,120,72,14,3,240,208,111,47,195,247,145,207,194,
134,90,150,6,74,116,3,64,195,205,146,31,176,120,192,14,75,79,235,242,92,91,24,
133,155,79,169,99,42,69,50,21,97,19,144,150,220,196,137,132,32,146,193,75,102,
137,62,254,63,250,110,93,246,97,122,210,47,10,255,175,126,26,170,155,248,183,
140,110,182,8,121,207,192,34,237,208,129,89,8,22,201,135,0,83,75,18,30,146,9,71,
37,14,90,4,14,189,55,62,60,249,129,0,167,224,227,96,202,191,133,159,8,233,184,
120,123,178,46,59,44,16,117,3,171,36,139,125,120,24,15,140,149,81,140,196,224,
93,253,136,205,90,193,14,96,71,107,234,156,206,12,180,78,222,8,21,201,253,1,
139,89,4,33,146,70,169,89,162,101,81,23,53,157,253,64,31,218,39,29,62,166,101,
187,174,151,190,125,83,88,73,61,163,128,17,88,64,42,132,12,110,119,47,212,5,237,
158,241,144,70,13,144,193,137,157,24,252,39,176,23,200,160,111,39,0,234,71,13,
208,167,103,1,196,136,146,1,61,31,36,235,125,107,100,144,86,144,234,200,110,246,
32,52,225,81,181,35,76,91,248,15,5,60,131,178,59,106,55,254,133,175,139,38,242,
30,222,164,31,31,93,248,177,35,229,38,141,183,168,195,199,143,142,64,179,127,
198,6,25,5,68,24,75,152,84,148,137,146,77,1,38,95,210,155,106,90,216,165,19,100,
18,53,244,87,23,147,105,102,40,97,32,64,153,171,68,103,182,19,217,95,176,158,
161,20,19,164,42,214,120,125,159,212,221,2,163,181,72,198,98,48,146,32,251,119,
183,240,106,159,199,52,166,57,72,26,159,51,148,34,44,118,118,178,140,229,12,39,
76,99,187,244,22,103,136,224,119,100,241,10,38,107,164,167,252,87,19,17,121,11,
24,103,127,157,21,143,172,219,4,117,28,132,149,108,206,197,34,223,78,52,20,82,
240,158,182,110,209,150,207,47,157,254,119,82,109,190,116,192,197,29,44,208,249,
61,117,169,61,73,131,92,14,135,204,140,250,196,45,237,78,213,135,2,239,49,136,
245,244,34,131,8,25,52,145,58,136,53,45,214,32,22,27,202,215,192,199,132,248,
128,71,217,203,130,158,187,212,255,2,253,241,88,94,99,34,247,148,0,0,0,0,73,69,
78,68,174,66,96,130};
static Fl_Image *image_title_image() {
  static Fl_Image *image = NULL;
  if (!image)
    image = new Fl_PNG_Image("title_image.png", idata_title_image, 3100);
  return image;
}

void LinksiumViewUI::cb_categorie_i(Fl_Tabs*, void*) {
  //printf("\nval tab %n\n", categorie->value());
}
void LinksiumViewUI::cb_categorie(Fl_Tabs* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->user_data()))->cb_categorie_i(o,v);
}

Fl_Menu_Item LinksiumViewUI::menu_config_choice[] = {
 {"basic", 0,  0, (void*)(0), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"plastic", 0,  0, (void*)(1), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"gtk+", 0,  0, (void*)(2), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"gleam", 0,  0, (void*)(3), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"oxy", 0,  0, (void*)(4), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LinksiumViewUI::cb_scheme_choice_i(Fl_Choice*, void*) {
  Fl::scheme(scheme_choice->text(scheme_choice->value()));
}
void LinksiumViewUI::cb_scheme_choice(Fl_Choice* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scheme_choice_i(o,v);
}

Fl_Menu_Item LinksiumViewUI::menu_scheme_choice[] = {
 {"basic", 0,  0, (void*)(0), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"plastic", 0,  0, (void*)(1), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"gtk+", 0,  0, (void*)(2), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"gleam", 0,  0, (void*)(3), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"oxy", 0,  0, (void*)(4), 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LinksiumViewUI::menu_color_theme[] = {
 {"light", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"dark", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LinksiumViewUI::cb__i(Fl_Button*, void* v) {
  int i = (int)(fl_intptr_t)v;


  Fl_Native_File_Chooser *G_chooser = new Fl_Native_File_Chooser();

        G_chooser->directory(".");                                // directory to start browsing with
          G_chooser->preset_file("config_file.txt");   // file to start with
          G_chooser->filter("text\t*.{txt}\n log\t*.{log}\n");
          G_chooser->type(Fl_Native_File_Chooser::BROWSE_FILE);     // only picks files that exist
          G_chooser->title("Selectionner le fichier de configuration...");  

        switch ( G_chooser->show() ) {
          case -1: break;   // Error
          case  1: break;   // Cancel
          default:          // Choice
            G_chooser->preset_file(G_chooser->filename());
            config_file->value(G_chooser->filename());
            fl_message("You chose: %s", G_chooser->filename());
            break;
        }

        fprintf(stderr, "DIRECTORY: '%s'\n", G_chooser->directory());
        fprintf(stderr, " FILENAME: '%s'\n", G_chooser->filename());
        fprintf(stderr, "    value: '%d'\n", i);
        fprintf(stderr, "--------------------\n");
}
void LinksiumViewUI::cb_(Fl_Button* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void LinksiumViewUI::cb_1_i(Fl_Button*, void* v) {
  int i = (int)(fl_intptr_t)v;


  Fl_Native_File_Chooser *G_chooser = new Fl_Native_File_Chooser();

        G_chooser->directory(".");                                // directory to start browsing with
          G_chooser->preset_file("log_file.log");   // file to start with
          G_chooser->filter("text\t*.{txt}\nlog\t*.{log}\n");
          G_chooser->type(Fl_Native_File_Chooser::BROWSE_FILE);     // only picks files that exist
          G_chooser->title("Selectionner le fichier de configuration...");  

        switch ( G_chooser->show() ) {
          case -1: break;   // Error
          case  1: break;   // Cancel
          default:          // Choice
            G_chooser->preset_file(G_chooser->filename());
            log_file->value(G_chooser->filename());
            fl_message("You chose: %s \nas log file", G_chooser->filename());
            break;
        }

        fprintf(stderr, "DIRECTORY: '%s'\n", G_chooser->directory());
        fprintf(stderr, " FILENAME: '%s'\n", G_chooser->filename());
        fprintf(stderr, "    value: '%d'\n", i);
        fprintf(stderr, "--------------------\n");
}
void LinksiumViewUI::cb_1(Fl_Button* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void LinksiumViewUI::cb_exit_app_i(Fl_Button*, void*) {
  FT_Close(ftHandle0);
  exit(0);
  //delete this;
}
void LinksiumViewUI::cb_exit_app(Fl_Button* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_exit_app_i(o,v);
}

void LinksiumViewUI::cb_SlicerPage1_i(Slicer_Page*, void*) {
  myMsg.sliceId      = 0;

  SlicerPage1->slider_freq->do_callback();
  SlicerPage1->slider_amp->do_callback();
  SlicerPage1->slider_phase->do_callback();
}
void LinksiumViewUI::cb_SlicerPage1(Slicer_Page* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->user_data()))->cb_SlicerPage1_i(o,v);
}

void LinksiumViewUI::cb_SlicerPage2_i(Slicer_Page*, void*) {
  myMsg.sliceId      = 1;

  SlicerPage2->slider_freq->do_callback();
  SlicerPage2->slider_amp->do_callback();
  SlicerPage2->slider_phase->do_callback();
}
void LinksiumViewUI::cb_SlicerPage2(Slicer_Page* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->user_data()))->cb_SlicerPage2_i(o,v);
}

void LinksiumViewUI::cb_SlicerPage3_i(Slicer_Page*, void*) {
  myMsg.sliceId      = 2;

  SlicerPage3->slider_freq->do_callback();
  SlicerPage3->slider_amp->do_callback();
  SlicerPage3->slider_phase->do_callback();
}
void LinksiumViewUI::cb_SlicerPage3(Slicer_Page* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->user_data()))->cb_SlicerPage3_i(o,v);
}

void LinksiumViewUI::cb_SlicerPage4_i(Slicer_Page*, void*) {
  myMsg.sliceId      = 3;

  SlicerPage4->slider_freq->do_callback();
  SlicerPage4->slider_amp->do_callback();
  SlicerPage4->slider_phase->do_callback();
}
void LinksiumViewUI::cb_SlicerPage4(Slicer_Page* o, void* v) {
  ((LinksiumViewUI*)(o->parent()->parent()->user_data()))->cb_SlicerPage4_i(o,v);
}

LinksiumViewUI::LinksiumViewUI() {
  { mainWindow = new Fl_Double_Window(480, 272, "Linksium_3QUB");
    mainWindow->labelsize(12);
    mainWindow->user_data((void*)(this));
    mainWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    mainWindow->when(FL_WHEN_NEVER);
    { TitleApp = new Fl_Group(275, 0, 200, 24);
      TitleApp->bind_image( image_title_image() );
      TitleApp->labeltype(FL_NO_LABEL);
      TitleApp->labelfont(1);
      TitleApp->labelsize(16);
      TitleApp->align(Fl_Align(520|FL_ALIGN_INSIDE));
      TitleApp->end();
    } // Fl_Group* TitleApp
    { categorie = new Fl_Tabs(5, 5, 470, 236, "Categorie");
      categorie->selection_color(FL_DARK2);
      categorie->labeltype(FL_NO_LABEL);
      categorie->callback((Fl_Callback*)cb_categorie);
      { ConfigPage = new Fl_Group(5, 25, 470, 215, "Config");
        ConfigPage->box(FL_THIN_UP_BOX);
        ConfigPage->labeltype(FL_NO_LABEL);
        ConfigPage->labelsize(12);
        ConfigPage->hide();
        { Fl_Group* o = new Fl_Group(10, 45, 460, 165, "Config Preferences");
          o->labeltype(FL_NO_LABEL);
          o->labelsize(10);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { config_choice = new Fl_Choice(77, 50, 90, 20, "Config:");
            config_choice->down_box(FL_BORDER_BOX);
            config_choice->labelsize(10);
            config_choice->textsize(10);
            config_choice->menu(menu_config_choice);
          } // Fl_Choice* config_choice
          { scheme_choice = new Fl_Choice(228, 50, 90, 20, "Scheme:");
            scheme_choice->down_box(FL_BORDER_BOX);
            scheme_choice->labelsize(10);
            scheme_choice->textsize(10);
            scheme_choice->callback((Fl_Callback*)cb_scheme_choice);
            scheme_choice->menu(menu_scheme_choice);
            scheme_choice->value(2);
            scheme_choice->do_callback();
          } // Fl_Choice* scheme_choice
          { color_theme = new Fl_Choice(379, 50, 90, 20, "Color:");
            color_theme->down_box(FL_BORDER_BOX);
            color_theme->labelsize(10);
            color_theme->textsize(10);
            color_theme->menu(menu_color_theme);
          } // Fl_Choice* color_theme
          { config_file = new Fl_Input(77, 84, 370, 20, "Config File:");
            config_file->labelsize(10);
            config_file->textsize(10);
          } // Fl_Input* config_file
          { Fl_Button* o = new Fl_Button(450, 84, 19, 20, "...");
            o->labelsize(10);
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          { log_file = new Fl_Input(77, 112, 370, 20, "Log File:");
            log_file->labelsize(10);
            log_file->textsize(10);
          } // Fl_Input* log_file
          { Fl_Button* o = new Fl_Button(450, 112, 20, 20, "...");
            o->labelsize(10);
            o->callback((Fl_Callback*)cb_1);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 215, 460, 20, "Config_settings");
          o->labeltype(FL_NO_LABEL);
          o->labelsize(10);
          { save_config = new Fl_Button(10, 215, 70, 20, "&Save");
            save_config->labelsize(10);
          } // Fl_Button* save_config
          { reload_config = new Fl_Button(85, 215, 70, 20, "&Reload");
            reload_config->labelsize(10);
          } // Fl_Button* reload_config
          { reset_config = new Fl_Button(160, 215, 70, 20, "R&eset");
            reset_config->labelsize(10);
          } // Fl_Button* reset_config
          { exit_app = new Fl_Button(400, 215, 70, 20, "&Exit");
            exit_app->labelsize(10);
            exit_app->callback((Fl_Callback*)cb_exit_app);
          } // Fl_Button* exit_app
          o->end();
        } // Fl_Group* o
        ConfigPage->end();
      } // Fl_Group* ConfigPage
      { SlicerPage1 = new Slicer_Page(5, 25, 470, 215, "Slice 1");
        SlicerPage1->box(FL_THIN_UP_BOX);
        SlicerPage1->color(FL_BACKGROUND_COLOR);
        SlicerPage1->selection_color(FL_BACKGROUND_COLOR);
        SlicerPage1->labeltype(FL_NO_LABEL);
        SlicerPage1->labelfont(0);
        SlicerPage1->labelsize(12);
        SlicerPage1->labelcolor(FL_FOREGROUND_COLOR);
        SlicerPage1->callback((Fl_Callback*)cb_SlicerPage1);
        SlicerPage1->align(Fl_Align(FL_ALIGN_TOP));
        SlicerPage1->when(FL_WHEN_RELEASE);
        SlicerPage1->hide();
        SlicerPage1->end();
      } // Slicer_Page* SlicerPage1
      { SlicerPage2 = new Slicer_Page(5, 25, 470, 215, "Slice 2");
        SlicerPage2->box(FL_THIN_UP_BOX);
        SlicerPage2->color(FL_BACKGROUND_COLOR);
        SlicerPage2->selection_color(FL_BACKGROUND_COLOR);
        SlicerPage2->labeltype(FL_NO_LABEL);
        SlicerPage2->labelfont(0);
        SlicerPage2->labelsize(12);
        SlicerPage2->labelcolor(FL_FOREGROUND_COLOR);
        SlicerPage2->callback((Fl_Callback*)cb_SlicerPage2);
        SlicerPage2->align(Fl_Align(FL_ALIGN_TOP));
        SlicerPage2->when(FL_WHEN_RELEASE);
        SlicerPage2->hide();
        SlicerPage2->end();
      } // Slicer_Page* SlicerPage2
      { SlicerPage3 = new Slicer_Page(5, 25, 470, 215, "Slice 3");
        SlicerPage3->box(FL_THIN_UP_BOX);
        SlicerPage3->color(FL_BACKGROUND_COLOR);
        SlicerPage3->selection_color(FL_BACKGROUND_COLOR);
        SlicerPage3->labeltype(FL_NO_LABEL);
        SlicerPage3->labelfont(0);
        SlicerPage3->labelsize(12);
        SlicerPage3->labelcolor(FL_FOREGROUND_COLOR);
        SlicerPage3->callback((Fl_Callback*)cb_SlicerPage3);
        SlicerPage3->align(Fl_Align(FL_ALIGN_TOP));
        SlicerPage3->when(FL_WHEN_RELEASE);
        SlicerPage3->hide();
        SlicerPage3->end();
      } // Slicer_Page* SlicerPage3
      { SlicerPage4 = new Slicer_Page(5, 25, 470, 215, "Slice 4");
        SlicerPage4->box(FL_THIN_UP_BOX);
        SlicerPage4->color(FL_BACKGROUND_COLOR);
        SlicerPage4->selection_color(FL_BACKGROUND_COLOR);
        SlicerPage4->labeltype(FL_NO_LABEL);
        SlicerPage4->labelfont(0);
        SlicerPage4->labelsize(12);
        SlicerPage4->labelcolor(FL_FOREGROUND_COLOR);
        SlicerPage4->callback((Fl_Callback*)cb_SlicerPage4);
        SlicerPage4->align(Fl_Align(FL_ALIGN_TOP));
        SlicerPage4->when(FL_WHEN_RELEASE);
        SlicerPage4->end();
      } // Slicer_Page* SlicerPage4
      categorie->end();
    } // Fl_Tabs* categorie
    { Fl_Group* o = new Fl_Group(4, 245, 471, 24, "Status_group");
      o->labeltype(FL_NO_LABEL);
      o->labelsize(10);
      { version_revision = new Fl_Box(182, 245, 110, 20, "Version_revision");
        version_revision->box(FL_ENGRAVED_FRAME);
        version_revision->labelsize(10);
      } // Fl_Box* version_revision
      { device_state = new Fl_Box(5, 247, 15, 15, "NO_DEVICE");
        device_state->box(FL_ROUND_UP_BOX);
        device_state->color((Fl_Color)1);
        device_state->labelsize(10);
        device_state->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Box* device_state
      o->end();
    } // Fl_Group* o
    mainWindow->size_range(480, 272, 480, 272);
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
}

void LinksiumViewUI::show(int argc, char **argv) {
  mainWindow->show(argc, argv);
}
static LinksiumViewUI *cvui;

void USBEventThread() {
  // FT_STATUS device_status;
      FT_SetVIDPID(0x0403, 0x6010);
      DWORD libraryVersion = 0;
      ftStatus  = FT_GetLibraryVersion(&libraryVersion);
      
      ftStatus  = FT_Open(FTDI_PORT, &ftHandle0);
      ftStatus |= FT_SetBitMode(ftHandle0, 0xFF, FT_BITMODE_SYNC_FIFO);
      ftStatus |= FT_SetTimeouts(ftHandle0, 100, 100);
      ftStatus |= FT_SetUSBParameters(ftHandle0, BUFFER_SIZE, BUFFER_SIZE);
      ftStatus |= FT_SetFlowControl(ftHandle0, FT_FLOW_RTS_CTS, 0, 0);
      DWORD dwNumDevices = 0;
      DWORD devIndex = 0;
      char Buffer[16];
      int count = 0;
  	myMsg.systemId = 0;
  	myMsg.sliceId = 0;
  	myMsg.withChecksum = false;
  	myMsg.type = MSG_TYPE_VERSION_RD;
  	
  	myMsg.hw_ver = 0;
  	myMsg.hw_rev = 0;
  	myMsg.sw_ver = 0;
  	myMsg.sw_rev = 0;
  	myMsg.xBuff(true);
  	
  	


      //do {

          device_status = FT_ListDevices((PVOID)devIndex,Buffer,FT_LIST_BY_INDEX|FT_OPEN_BY_SERIAL_NUMBER);

          if ((ftStatus == FT_OK) &&  FT_SUCCESS(device_status)){
              fprintf(stderr, "USB device connected \n"); 
              fprintf(stderr, "FT_Open succeeded.  Handle is '%p' \n", ftHandle0);
              fprintf(stderr, "Device %d Serial Number - %s\n", devIndex, Buffer);
              cvui->device_state->color(FL_GREEN);
              cvui->device_state->copy_label("Linked ON");
              ftStatus |= FT_Write(ftHandle0, myMsg.buff, 1, &dwBytesWritten);
  		myMsg.clear_buff();
  		ftStatus |= FT_Read(ftHandle0, myMsg.buff, myMsg.len(), &dwBytesWritten);
  		myMsg.xBuff();
  		printf("HW Ver.rev=%01X.%01X SW Ver.rev=%01X.%01X\n", myMsg.hw_ver, myMsg.hw_rev, myMsg.sw_ver, myMsg.sw_rev);
  		sprintf(version_revision,"HW:%X.%02X SW:%X.%02X", myMsg.hw_ver, myMsg.hw_rev, myMsg.sw_ver, myMsg.sw_rev);
              
              cvui->version_revision->copy_label(version_revision);
              cvui->device_state->redraw();

              
          }else{   
              FT_Close(ftHandle0);
  	    fprintf(stderr, "Error: FT_ListDevices:: '%d'\n", device_status);
              fprintf(stderr, "Failed to open USB device \n");
              cvui->device_state->color(FL_RED);
              cvui->device_state->copy_label("Linked OFF");
              cvui->version_revision->copy_label("");
              cvui->device_state->redraw();
              ftStatus = FT_Open(FTDI_PORT, &ftHandle0);
          }

          usleep(10000000);
          //cvui->device_state->redraw();
          //Fl::redraw();

      //}while(FT_SUCCESS(device_status));
}

int main(int argc, char **argv) {
  FT_Close(ftHandle0);
  DWORD dwRxSize = 21;
  DWORD dwBytesWritten, dwBytesRead;


  const char *FPGA1 = "NL7V0UH3A";
  const char *FPGA2 = "NL7X6TIRB";
  const char debug_stp[] = "\x00\x11";
  const char sin_config_data[] = "\x03\xf0\x00\xac";
  const char read_data[] = "\x02";
  const char lockin_data[] = "\x07\x00\x00\x00\x0f\xa0\x0f\xff\x00\x00\x05";
  const char id_one_data[] = "\x05\x00\x00\x09\x42\x00\x00";
  const char pid_two_data[] = "\x09\x00\x00\x05\x00\x00\x00";

  const char *my_data = sin_config_data;
  const int data_size = strlen(my_data);

  cvui = new LinksiumViewUI();

  Fl::lock();

  Fl::visual(FL_DOUBLE | FL_INDEX);
  cvui->show(argc, argv);

  std::thread usbThread(USBEventThread);

  int result = Fl::run();

  usbThread.join();

  FT_Close(ftHandle0);
  return Fl::run();
}

//
// NameOfProgram, ShortDescription
// Copyright (C) YYYY  NameOfAuthor
//
